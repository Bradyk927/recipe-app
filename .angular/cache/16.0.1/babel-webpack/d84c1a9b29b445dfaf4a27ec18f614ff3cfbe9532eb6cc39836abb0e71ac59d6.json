{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Directive, HostBinding, HostListener } from '@angular/core';\nexport var DropdownDirective = /** @class */function () {\n  function DropdownDirective() {\n    this.isOpen = false;\n  }\n  DropdownDirective.prototype.toggleOpen = function () {\n    this.isOpen = !this.isOpen;\n  };\n  __decorate([HostBinding('class.open'), __metadata(\"design:type\", Object)], DropdownDirective.prototype, \"isOpen\", void 0);\n  __decorate([HostListener('document:click', [$]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], DropdownDirective.prototype, \"toggleOpen\", null);\n  DropdownDirective = __decorate([Directive({\n    selector: '[appDropdown]'\n  })], DropdownDirective);\n  return DropdownDirective;\n}();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}